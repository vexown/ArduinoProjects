// Radio Frequency IDentification (RFID)
#include <Stepper.h>
#include<SPI.h>
#include<MFRC522.h>

int speakerPin = 6;

//creating mfrc522 instance
#define RSTPIN 9
#define SSPIN 10
MFRC522 rc(SSPIN, RSTPIN);
int readsuccess;
byte defcard[][4]={{0x35,0x9D,0x2D,0xE2},{0x45,0xC6,0x55,0xD3}};

int N=2; //change this to the number of cards/tags you will use
byte readcard[4];

// defcard - zdefiniowana karta
// readcard - odczytana karta

////STEPPER////
#define IN1  2
#define IN2  3
#define IN3  4
#define IN4  5
int Steps = 0;
boolean Direction = true;// gre
unsigned long last_time;
unsigned long currentMillis ;
int steps_left=4095/3;
long time;
////STEPPER////
int kek =0;


int length = 51; // the number of notes
char notes[] = "eeeeeeegcdefffffeeeeeddedgeeeeeeegcdefffffeeeeggfdc"; //eee eee egcde fff ffeeeeeddedgeee eee egcde ffff feeee ggfdc;
int beats[] = {2,2,4,2,2,4,2,2,2,2,8,2,2,4,1,2,2,2,2,1,1,2,2,2,4,4,2,2,4,2,2,4,2,2,2,2,8,2,2,2,2,2,2,2,1,1,2,2,2,2,8};
int tempo = 150;

void playTone(int tone, int duration) {
  for (long i = 0; i < duration * 1000L; i += tone * 2) {
    digitalWrite(speakerPin, HIGH);
    delayMicroseconds(tone);
    digitalWrite(speakerPin, LOW);
    delayMicroseconds(tone);
  }
}
void playNote(char note, int duration) {
  char names[] = { 'c', 'd', 'e', 'f', 'g', 'a', 'b', 'C' };
  int tones[] = { 1915, 1700, 1519, 1432, 1275, 1136, 1014, 956 };

  // play the tone corresponding to the note name
  for (int i = 0; i < 8; i++) {
    if (names[i] == note) {
      playTone(tones[i], duration);
    }
  }
}

void setup()

{

  pinMode(speakerPin, OUTPUT);

pinMode(8,OUTPUT);

  ////STEPPER////
Serial.begin(9600);
pinMode(IN1, OUTPUT);
pinMode(IN2, OUTPUT);
pinMode(IN3, OUTPUT);
pinMode(IN4, OUTPUT);
////STEPPER////


SPI.begin();
rc.PCD_Init(); //initialize the receiver
rc.PCD_DumpVersionToSerial(); //show details of card reader module



}


void loop()

{

readsuccess = getid();

if(readsuccess){


  int match=0;

//this is the part where compare the current tag with pre defined tags
  for(int i=0;i<4;i++)
  {

    if ( (readcard[0,i],HEX) == (defcard[0,0],HEX) )
        {
        match++;
        }
  }


   if(match==4)
      {Serial.println("CARD AUTHORISED");
      Serial.println("-----------------------------------------------");
        Serial.println("");


        digitalWrite(8,HIGH);


        dostepper();
        kek=0;

        digitalWrite(8,LOW);

        Serial.println("skonczylem");


      }
     else {
      Serial.println("CARD NOT Authorised");
      Serial.println("-----------------------------------------------");

      }

  }
} // koniec loop

////STEPPER//////////////////////////////////////////////////////////////////////////////////////////

int getid(){   //function to get the UID of the card
  if(!rc.PICC_IsNewCardPresent()){
    return 0;
  }
  if(!rc.PICC_ReadCardSerial()){
    return 0;
  }


  Serial.println("THE UID OF THE SCANNED CARD IS:");

  for(int i=0;i<4;i++){
    readcard[i]=rc.uid.uidByte[i]; //storing the UID of the tag in readcard
    Serial.print(readcard[i],HEX); //An optional second parameter specifies the base (format) to use
                                   // FORMAT Serial.print(78, HEX) gives "4E"
                                   // LUB L.PO PRZEC. Serial.println(1.23456, 2) gives "1.23"

  }
   Serial.println("");
   Serial.println("-----------------------------------------------");
  rc.PICC_HaltA();

return 1; //return - Terminate a function and return a value from a function to the calling function, if desired.

}

void dostepper(){




 ////STEPPER//////////////////////////////////////////////////////////////////////////////////////////
  while (kek<=1)
    {





  while(steps_left>0){

  currentMillis = micros();
  if(currentMillis-last_time>=1000){
  stepper(1);
  time=time+micros()-last_time;
  last_time=micros();
  steps_left--;
  }
  }

   Serial.println(time);
  Serial.println("Wait...!");

    kek ++;
  if (kek==1){
        for (int i = 0; i < length; i++) {
    if (notes[i] == ' ') {
      delay(beats[i] * tempo); // rest
    } else {
      playNote(notes[i], beats[i] * tempo);
    }

    // pause between notes
    delay(tempo / 2);
      }
  }

  delay(50000);
  Direction=!Direction;



  Serial.println(kek);
  steps_left=4095/3;

    }
}
////STEPPER//////////////////////////////////////////////////////////////////////////////////////////

////STEPPER//////////////////////////////////////////////////////////////////////////////////////////
void stepper(int xw){
  for (int x=0;x<xw;x++){
switch(Steps){
   case 0:
     digitalWrite(IN1, LOW);
     digitalWrite(IN2, LOW);
     digitalWrite(IN3, LOW);
     digitalWrite(IN4, HIGH);
   break;
   case 1:
     digitalWrite(IN1, LOW);
     digitalWrite(IN2, LOW);
     digitalWrite(IN3, HIGH);
     digitalWrite(IN4, HIGH);
   break;
   case 2:
     digitalWrite(IN1, LOW);
     digitalWrite(IN2, LOW);
     digitalWrite(IN3, HIGH);
     digitalWrite(IN4, LOW);
   break;
   case 3:
     digitalWrite(IN1, LOW);
     digitalWrite(IN2, HIGH);
     digitalWrite(IN3, HIGH);
     digitalWrite(IN4, LOW);
   break;
   case 4:
     digitalWrite(IN1, LOW);
     digitalWrite(IN2, HIGH);
     digitalWrite(IN3, LOW);
     digitalWrite(IN4, LOW);
   break;
   case 5:
     digitalWrite(IN1, HIGH);
     digitalWrite(IN2, HIGH);
     digitalWrite(IN3, LOW);
     digitalWrite(IN4, LOW);
   break;
     case 6:
     digitalWrite(IN1, HIGH);
     digitalWrite(IN2, LOW);
     digitalWrite(IN3, LOW);
     digitalWrite(IN4, LOW);
   break;
   case 7:
     digitalWrite(IN1, HIGH);
     digitalWrite(IN2, LOW);
     digitalWrite(IN3, LOW);
     digitalWrite(IN4, HIGH);
   break;
   default:
     digitalWrite(IN1, LOW);
     digitalWrite(IN2, LOW);
     digitalWrite(IN3, LOW);
     digitalWrite(IN4, LOW);
   break;
}
SetDirection();
}
}

void SetDirection(){
if(Direction==1){ Steps++;}
if(Direction==0){ Steps--; }
if(Steps>7){Steps=0;}
if(Steps<0){Steps=7; }
}
